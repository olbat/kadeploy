#!/usr/bin/ruby

require 'tempfile'

USAGE = "Usage: #{$0} <gateway_user> <gateway_address> [<ssh_key_path>]"

INSTALL_PACKAGES = false
CONFIG_KVM_SCRIPTS = false

PROXY_ADDR = 'proxy'
PROXY_PORT = '3128'
SSH_KEY = '/tmp/identity'
SSH_OPTIONS	= '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o PreferredAuthentications=publickey'
APT_OPTIONS = " -o Acquire::http::Proxy=\"http://localhost:#{PROXY_PORT}\" "
APT_REPO_URL = "http://ftp.fr.debian.org/debian"
APT_REPO_VARIANT = "testing"
APT_REPO_CONF_FILE = '/etc/apt/sources.list'

KVM_PACKAGES = [ 'kvm', 'qemu', 'qemu-kvm' , 'bridge-utils', 'screen' ]
BRIDGE_DEV = 'br0'
ADMIN_IFACE = 'eth0'
NET_MTU = '1500'

EXCL_DEVS = [ BRIDGE_DEV,'lo' ]

NETWORKING_CONF_FILE = '/etc/network/interfaces'
def cfg_networking_bridge(ifname,macaddr)
  "auto lo\n"\
  "iface lo inet loopback\n\n"\
  "iface #{ifname} inet manual\n\n"\
  "auto #{BRIDGE_DEV}\n"\
  "iface #{BRIDGE_DEV} inet dhcp\n"\
  "  bridge_ports #{ifname}\n"\
  "  bridge_stp      off\n"\
  "  bridge_maxwait  0\n"\
  "  bridge_fd       0\n"\
  "pre-up ifconfig #{ifname} 0.0.0.0 mtu #{NET_MTU}\n"\
  "bridge_hw #{macaddr}\n\n"
end

KVM_IFUP_CONF_FILE = '/etc/kvm/kvm-ifup'
def cfg_kvm_ifup()
  "#! /bin/sh\n"\
  "# Script to bring a network (tap) device for qemu-kvm up\n"\
  "# The idea is to add the tap device to the same bridge\n"\
  "# as we have default routing to.\n"\
  "# in order to be able to find brctl\n"\
  "PATH=$PATH:/sbin:/usr/sbin\n"\
  "ip=$(which ip)\n"\
  "if [ -n \"$ip\" ]; then\n"\
  "  ip link set \"$1\" mtu #{NET_MTU} up\n"\
  "else\n"\
  "  ifconfig \"$1\" 0.0.0.0 mtu #{NET_MTU} up\n"\
  "fi\n"\
  "brctl=$(which brctl)\n"\
  "if [ ! \"$ip\" -o ! \"$brctl\" ]; then\n"\
  "  echo \"W: $0: not doing any bridge processing: ip or brctl utility not found\" >&2\n"\
  "  exit 0\n"\
  "fi\n"\
  "switch=$(ip route ls | \\\n"\
  "  awk '/^default / {\n"\
  "    for(i=0;i<NF;i++) { if ($i == \"dev\") { print $(i+1); next; } }\n"\
  "  }'\n"\
  ")\n"\
  "# only add the interface to default-route bridge if we\n"\
  "# have such interface (with default route) and if that\n"\
  "# interface is actually a bridge.\n"\
  "# It is possible to have several default routes too\n"\
  "for br in $switch; do\n"\
  "  if [ -d /sys/class/net/$br/bridge/. ]; then\n"\
  "    brctl addif $br \"$1\"\n"\
  "    exit	# exit with status of brctl\n"\
  "  fi\n"\
  "done\n"\
  "echo \"W: $0: no bridge for guest interface found\" >&2\n"
end

def cmd(cmd,critical=true)
  ret = `#{cmd}`.split("\n")
  if critical and !$?.success?
    $stderr.puts "error when executing '#{cmd}': #{ret}"
    exit 1
  end
  ret
end

SSH_TUNNEL_TIMEOUT=60
def ssh_tunnel(gwuser,gwhost,dstport,dsthost,srcport=nil,srchost=nil)
  srcport = dstport unless srcport

  tmp = cmd("lsof -i4 | grep LISTEN | grep localhost:#{srcport}; true")[0]
  if tmp and !tmp.empty?
    cmd("kill #{tmp.chomp.split[1]}")
    time_start = Time.now
    begin
      tmp = cmd("lsof -i4 | grep LISTEN | grep localhost:#{srcport}; true")[0]
      cmd("kill -9 #{tmp.chomp.split[1]}") if (Time.now - time_start) > 2
      sleep(0.1)
    end until !tmp or tmp.empty?
  end
  cmd("ssh #{SSH_OPTIONS} -N -L #{srcport}:#{dsthost}:#{dstport} -i #{$sshkeyfile} #{gwuser}@#{gwhost} &>/dev/null &")
  time_start = Time.now
  begin
    tmp = cmd("lsof -i4 | grep LISTEN | grep localhost:#{srcport}; true")[0]
    sleep(0.1)
    if Time.now - time_start > SSH_TUNNEL_TIMEOUT
      $stderr.puts "SSH tunnel creation on #{srchost}:#{srcport} failed"
      exit 1
    end
  end while !tmp or tmp.empty?
  tunpid = tmp.split[1]

  yield

  cmd("kill #{tunpid}")
end


if INSTALL_PACKAGES
  if ARGV.size < 2
    $stderr.puts USAGE
    exit 1
  end

  if !ARGV[2] or ARGV[2].empty?
    $sshkeyfile = SSH_KEY
  else
    $sshkeyfile = ARGV[2]
  end

  unless File.exists?($sshkeyfile)
    $stderr.puts "file not found '#{$sshkeyfile}'"
    exit 1
  end

  tmp = cmd("grep '^deb' #{APT_REPO_CONF_FILE} | grep #{APT_REPO_URL} | grep #{APT_REPO_VARIANT}; true")

  cmd("echo 'deb #{APT_REPO_URL} #{APT_REPO_VARIANT} main contrib non-free' >> #{APT_REPO_CONF_FILE}") if !tmp or tmp.empty?

  ssh_tunnel(ARGV[0],ARGV[1],PROXY_PORT,PROXY_ADDR,PROXY_PORT) do
    cmd("DEBIAN_FRONTEND=noninteractive apt-get #{APT_OPTIONS} update -q")
    cmd("DEBIAN_FRONTEND=noninteractive apt-get #{APT_OPTIONS} install -t #{APT_REPO_VARIANT} -q --yes --force-yes #{KVM_PACKAGES.join(' ')}")
  end
end

tmp = cmd("ifconfig -a -s")

ifaces=[]
tmp.each do |line|
  unless line =~ /^\s*Iface.*$/
    ifaces << line.split()[0]
  end
end

# Creating the bridge
if !ifaces.include?(BRIDGE_DEV) or ifaces.empty?
  ifaces -= EXCL_DEVS

  # Getting default interface name
  tmp = cmd("route -n")
  if !tmp or tmp.empty?
    $stderr.puts 'can\'t get route informations'
    exit 1
  end

  defaultiface = nil
  tmp.each do |line|
    if line =~ /^0\.0\.0\.0\s+\S+\s+.+\s+(\S+)\s*$/
      defaultiface = Regexp.last_match(1)
    end
  end

  if !defaultiface or defaultiface.empty?
    puts "can't get default iface, using #{ADMIN_IFACE}"
    defaultiface = ADMIN_IFACE
  end

  tmp = cmd("ifconfig #{defaultiface}")
  if !tmp or tmp.empty?
    $stderr.puts 'can\'t ifconfig default network iface'
    exit 1
  end

  mac = nil
  #ipv4 = nil
  tmp.each do |line|
    if line.include?('HWaddr')
      mac = line.split('HWaddr')[1].strip.split[0]
    #elsif line.include?('inet addr:')
    #  ipv4 = line.split('inet addr:')[1].strip.split[0]
    end
  end

  ifaces.delete(defaultiface)

  ifaces.each do |iface|
    cmd("ifconfig #{iface} down")
  end

  if CONFIG_KVM_SCRIPTS
    tmp = Tempfile.new('kvm-ifup')
    tmp.write(cfg_kvm_ifup())
    tmp.close
    cmd("cp -f #{tmp.path} #{KVM_IFUP_CONF_FILE}")
    tmp.unlink
  end

  tmp = Tempfile.new('networking')
  tmp.write(cfg_networking_bridge(defaultiface,mac))
  tmp.close
  cmd("cp -f #{tmp.path} #{NETWORKING_CONF_FILE}")
  tmp.unlink

  cmd("service networking restart &>/dev/null")
end

